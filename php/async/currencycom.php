<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use \ccxt\ExchangeError;
use \ccxt\ArgumentsRequired;
use \ccxt\InvalidOrder;
use \ccxt\DDoSProtection;
use \ccxt\Precise;

class currencycom extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe (), array(
            'id' => 'currencycom',
            'name' => 'Currency.com',
            'countries' => array( 'BY' ), // Belarus
            'rateLimit' => 500,
            'certified' => true,
            'pro' => true,
            'version' => 'v2',
            // new metainfo interface
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => true,
                'swap' => true,
                'future' => false,
                'option' => false,
                'addMargin' => null,
                'cancelAllOrders' => null,
                'cancelOrder' => true,
                'cancelOrders' => null,
                'createDepositAddress' => null,
                'createLimitOrder' => true,
                'createMarketOrder' => true,
                'createOrder' => true,
                'deposit' => null,
                'editOrder' => 'emulated',
                'fetchAccounts' => true,
                'fetchBalance' => true,
                'fetchBidsAsks' => null,
                'fetchBorrowRate' => null,
                'fetchBorrowRateHistory' => null,
                'fetchBorrowRates' => null,
                'fetchBorrowRatesPerSymbol' => null,
                'fetchCanceledOrders' => null,
                'fetchClosedOrder' => null,
                'fetchClosedOrders' => null,
                'fetchCurrencies' => true,
                'fetchDeposit' => null,
                'fetchDepositAddress' => true,
                'fetchDepositAddresses' => false,
                'fetchDepositAddressesByNetwork' => false,
                'fetchDeposits' => true,
                'fetchFundingFee' => null,
                'fetchFundingFees' => null,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchL2OrderBook' => true,
                'fetchLedger' => null,
                'fetchLedgerEntry' => null,
                'fetchLeverage' => true,
                'fetchLeverageTiers' => false,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenOrder' => null,
                'fetchOpenOrders' => true,
                'fetchOrder' => null,
                'fetchOrderBook' => true,
                'fetchOrderBooks' => null,
                'fetchOrders' => null,
                'fetchOrderTrades' => null,
                'fetchPosition' => null,
                'fetchPositions' => null,
                'fetchPositionsRisk' => null,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => true,
                'fetchTrades' => true,
                'fetchTradingFee' => null,
                'fetchTradingFees' => true,
                'fetchTradingLimits' => null,
                'fetchTransactions' => true,
                'fetchTransfers' => null,
                'fetchWithdrawal' => null,
                'fetchWithdrawals' => true,
                'reduceMargin' => null,
                'setLeverage' => null,
                'setMarginMode' => null,
                'setPositionMode' => null,
                'signIn' => null,
                'transfer' => null,
                'withdraw' => null,
            ),
            'timeframes' => array(
                '1m' => '1m',
                '5m' => '5m',
                '10m' => '10m',
                '15m' => '15m',
                '30m' => '30m',
                '1h' => '1h',
                '4h' => '4h',
                '1d' => '1d',
                '1w' => '1w',
            ),
            'urls' => array(
                'logo' => 'https://user-images.githubusercontent.com/1294454/83718672-36745c00-a63e-11ea-81a9-677b1f789a4d.jpg',
                'api' => array(
                    'public' => 'https://api-adapter.backend.currency.com/api',
                    'private' => 'https://api-adapter.backend.currency.com/api',
                ),
                'test' => array(
                    'public' => 'https://demo-api-adapter.backend.currency.com/api',
                    'private' => 'https://demo-api-adapter.backend.currency.com/api',
                ),
                'www' => 'https://www.currency.com',
                'referral' => 'https://currency.com/trading/signup?c=362jaimv&pid=referral',
                'doc' => array(
                    'https://currency.com/api',
                ),
                'fees' => 'https://currency.com/fees-charges',
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'v1/time',
                        'v2/time',
                        'v1/exchangeInfo',
                        'v2/exchangeInfo',
                        'v1/depth',
                        'v2/depth',
                        'v1/aggTrades',
                        'v2/aggTrades',
                        'v1/klines',
                        'v2/klines',
                        'v1/ticker/24hr',
                        'v2/ticker/24hr',
                    ),
                ),
                'private' => array(
                    'get' => array(
                        'v1/account',
                        'v2/account',
                        'v1/currencies',
                        'v2/currencies',
                        'v1/deposits',
                        'v2/deposits',
                        'v1/depositAddress',
                        'v2/depositAddress',
                        'v1/ledger',
                        'v2/ledger',
                        'v1/leverageSettings',
                        'v2/leverageSettings',
                        'v1/myTrades',
                        'v2/myTrades',
                        'v1/openOrders',
                        'v2/openOrders',
                        'v1/tradingPositions',
                        'v2/tradingPositions',
                        'v1/tradingPositionsHistory',
                        'v2/tradingPositionsHistory',
                        'v1/transactions',
                        'v2/transactions',
                        'v1/withdrawals',
                        'v2/withdrawals',
                    ),
                    'post' => array(
                        'v1/order',
                        'v2/order',
                        'v1/updateTradingPosition',
                        'v2/updateTradingPosition',
                        'v1/updateTradingOrder',
                        'v2/updateTradingOrder',
                        'v1/closeTradingPosition',
                        'v2/closeTradingPosition',
                    ),
                    'delete' => array(
                        'v1/order',
                        'v2/order',
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'feeSide' => 'get',
                    'tierBased' => false,
                    'percentage' => true,
                    'taker' => $this->parse_number('0.002'),
                    'maker' => $this->parse_number('0.002'),
                ),
            ),
            'precisionMode' => TICK_SIZE,
            // exchange-specific options
            'options' => array(
                'defaultTimeInForce' => 'GTC', // 'GTC' = Good To Cancel (default), 'IOC' = Immediate Or Cancel, 'FOK' = Fill Or Kill
                'warnOnFetchOpenOrdersWithoutSymbol' => true,
                'recvWindow' => 5 * 1000, // 5 sec, default
                'timeDifference' => 0, // the difference between system clock and Binance clock
                'adjustForTimeDifference' => false, // controls the adjustment logic upon instantiation
                'parseOrderToPrecision' => false, // force amounts and costs in parseOrder to precision
                'newOrderRespType' => array(
                    'market' => 'FULL', // 'ACK' for order id, 'RESULT' for full order or 'FULL' for order with fills
                    'limit' => 'RESULT', // we change it from 'ACK' by default to 'RESULT'
                    'stop' => 'RESULT',
                ),
            ),
            'exceptions' => array(
                'broad' => array(
                    'FIELD_VALIDATION_ERROR Cancel is available only for LIMIT order' => '\\ccxt\\InvalidOrder',
                    'API key does not exist' => '\\ccxt\\AuthenticationError',
                    'Order would trigger immediately.' => '\\ccxt\\InvalidOrder',
                    'Account has insufficient balance for requested action.' => '\\ccxt\\InsufficientFunds',
                    'Rest API trading is not enabled.' => '\\ccxt\\ExchangeNotAvailable',
                    'Only leverage symbol allowed here:' => '\\ccxt\\BadSymbol', // when you fetchLeverage for non-leverage symbols, like 'BTC/USDT' instead of 'BTC/USDT_LEVERAGE' => array("code":"-1128","msg":"Only leverage symbol allowed here => BTC/USDT")
                ),
                'exact' => array(
                    '-1000' => '\\ccxt\\ExchangeNotAvailable', // array("code":-1000,"msg":"An unknown error occured while processing the request.")
                    '-1013' => '\\ccxt\\InvalidOrder', // createOrder -> 'invalid quantity'/'invalid price'/MIN_NOTIONAL
                    '-1021' => '\\ccxt\\InvalidNonce', // 'your time is ahead of server'
                    '-1022' => '\\ccxt\\AuthenticationError', // array("code":-1022,"msg":"Signature for this request is not valid.")
                    '-1100' => '\\ccxt\\InvalidOrder', // createOrder(symbol, 1, asdf) -> 'Illegal characters found in parameter 'price'
                    '-1104' => '\\ccxt\\ExchangeError', // Not all sent parameters were read, read 8 parameters but was sent 9
                    '-1025' => '\\ccxt\\AuthenticationError', // array("code":-1025,"msg":"Invalid API-key, IP, or permissions for action")
                    '-1128' => '\\ccxt\\BadRequest', // array("code":-1128,"msg":"Combination of optional parameters invalid.")
                    '-2010' => '\\ccxt\\ExchangeError', // generic error code for createOrder -> 'Account has insufficient balance for requested action.', array("code":-2010,"msg":"Rest API trading is not enabled."), etc...
                    '-2011' => '\\ccxt\\OrderNotFound', // cancelOrder(1, 'BTC/USDT') -> 'UNKNOWN_ORDER'
                    '-2013' => '\\ccxt\\OrderNotFound', // fetchOrder (1, 'BTC/USDT') -> 'Order does not exist'
                    '-2014' => '\\ccxt\\AuthenticationError', // array( "code":-2014, "msg" => "API-key format invalid." )
                    '-2015' => '\\ccxt\\AuthenticationError', // "Invalid API-key, IP, or permissions for action."
                ),
            ),
            'commonCurrencies' => array(
                'ACN' => 'Accenture',
                'BNS' => 'Bank of Nova Scotia',
                'CAR' => 'Avis Budget Group Inc',
                'CLR' => 'Continental Resources',
                'EDU' => 'New Oriental Education & Technology Group Inc',
                'ETN' => 'Eaton',
                'FOX' => 'Fox Corporation',
                'GM' => 'General Motors Co',
                'IQ' => 'iQIYI',
                'OSK' => 'Oshkosh',
                'PLAY' => "Dave & Buster's Entertainment",
            ),
        ));
    }

    public function nonce() {
        return $this->milliseconds() - $this->options['timeDifference'];
    }

    public function fetch_time($params = array ()) {
        $response = yield $this->publicGetV2Time ($params);
        //
        //     {
        //         "serverTime" => 1590998366609
        //     }
        //
        return $this->safe_integer($response, 'serverTime');
    }

    public function fetch_currencies($params = array ()) {
        // requires authentication
        if (!$this->check_required_credentials(false)) {
            return null;
        }
        $response = yield $this->privateGetV2Currencies ($params);
        //
        //     array(
        //         array(
        //           name => "US Dollar",
        //           displaySymbol => "USD.cx",
        //           $precision => "2",
        //           type => "FIAT",
        //           minWithdrawal => "100.0",
        //           maxWithdrawal => "1.0E+8",
        //           minDeposit => "100.0",
        //         ),
        //         array(
        //             name => "Bitcoin",
        //             displaySymbol => "BTC",
        //             $precision => "8",
        //             type => "CRYPTO",  // Note => only several major ones have this value. Others (like USDT) have value : "TOKEN"
        //             minWithdrawal => "0.00020",
        //             commissionFixed => "0.00010",
        //             minDeposit => "0.00010",
        //         ),
        //     )
        //
        $result = array();
        for ($i = 0; $i < count($response); $i++) {
            $currency = $response[$i];
            $id = $this->safe_string($currency, 'displaySymbol');
            $code = $this->safe_currency_code($id);
            $fee = $this->safe_number($currency, 'commissionFixed');
            $precision = $this->safe_integer($currency, 'precision');
            $result[$code] = array(
                'id' => $id,
                'code' => $code,
                'address' => $this->safe_string($currency, 'baseAddress'),
                'info' => $currency,
                'type' => $this->safe_string_lower($currency, 'type'),
                'name' => $this->safe_string($currency, 'name'),
                'active' => null,
                'deposit' => null,
                'withdraw' => null,
                'fee' => $fee,
                'precision' => $precision,
                'limits' => array(
                    'amount' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'withdraw' => array(
                        'min' => $this->safe_number($currency, 'minWithdrawal'),
                        'max' => null,
                    ),
                    'deposit' => array(
                        'min' => $this->safe_number($currency, 'minDeposit'),
                        'max' => null,
                    ),
                ),
            );
        }
        return $result;
    }

    public function fetch_markets($params = array ()) {
        $response = yield $this->publicGetV2ExchangeInfo ($params);
        //
        //     {
        //         "timezone":"UTC",
        //         "serverTime":1603252990096,
        //         "rateLimits":array(
        //             array("rateLimitType":"REQUEST_WEIGHT","interval":"MINUTE","intervalNum":1,"limit":1200),
        //             array("rateLimitType":"ORDERS","interval":"SECOND","intervalNum":1,"limit":10),
        //             array("rateLimitType":"ORDERS","interval":"DAY","intervalNum":1,"limit":864000),
        //         ),
        //         "exchangeFilters":array(),
        //         "symbols":[
        //             array(
        //                 "symbol":"EVK",
        //                 "name":"Evonik",
        //                 "status":"BREAK",
        //                 "baseAsset":"EVK",
        //                 "baseAssetPrecision":3,
        //                 "quoteAsset":"EUR",
        //                 "quoteAssetId":"EUR",
        //                 "quotePrecision":3,
        //                 "orderTypes":["LIMIT","MARKET"],
        //                 "filters":array(
        //                     array("filterType":"LOT_SIZE","minQty":"1","maxQty":"27000","stepSize":"1"),
        //                     array("filterType":"MIN_NOTIONAL","minNotional":"23")
        //                 ),
        //                 "marketType":"SPOT",
        //                 "country":"DE",
        //                 "sector":"Basic Materials",
        //                 "industry":"Diversified Chemicals",
        //                 "tradingHours":"UTC; Mon 07:02 - 15:30; Tue 07:02 - 15:30; Wed 07:02 - 15:30; Thu 07:02 - 15:30; Fri 07:02 - 15:30",
        //                 "tickSize":0.005,
        //                 "tickValue":0.11125,
        //                 "exchangeFee":0.05
        //             ),
        //             array(
        //                 "symbol":"BTC/USD_LEVERAGE",
        //                 "name":"Bitcoin / USD",
        //                 "status":"TRADING",
        //                 "baseAsset":"BTC",
        //                 "baseAssetPrecision":3,
        //                 "quoteAsset":"USD",
        //                 "quoteAssetId":"USD_LEVERAGE",
        //                 "quotePrecision":3,
        //                 "orderTypes":["LIMIT","MARKET","STOP"],
        //                 "filters":array(
        //                     array("filterType":"LOT_SIZE","minQty":"0.001","maxQty":"100","stepSize":"0.001"),
        //                     array("filterType":"MIN_NOTIONAL","minNotional":"13")
        //                 ),
        //                 "marketType":"LEVERAGE",
        //                 "longRate":-0.01,
        //                 "shortRate":0.01,
        //                 "swapChargeInterval":480,
        //                 "country":"",
        //                 "sector":"",
        //                 "industry":"",
        //                 "tradingHours":"UTC; Mon - 21:00, 21:05 -; Tue - 21:00, 21:05 -; Wed - 21:00, 21:05 -; Thu - 21:00, 21:05 -; Fri - 21:00, 22:01 -; Sat - 21:00, 21:05 -; Sun - 20:00, 21:05 -",
        //                 "tickSize":0.05,
        //                 "tickValue":610.20875,
        //                 "makerFee":-0.025,
        //                 "takerFee":0.075
        //             ),
        //         ]
        //     }
        //
        if ($this->options['adjustForTimeDifference']) {
            yield $this->load_time_difference();
        }
        $markets = $this->safe_value($response, 'symbols');
        $result = array();
        for ($i = 0; $i < count($markets); $i++) {
            $market = $markets[$i];
            $id = $this->safe_string($market, 'symbol');
            $baseId = $this->safe_string($market, 'baseAsset');
            $quoteId = $this->safe_string($market, 'quoteAsset');
            $base = $this->safe_currency_code($baseId);
            $quote = $this->safe_currency_code($quoteId);
            $symbol = $base . '/' . $quote;
            if (mb_strpos($id, '/') !== false) {
                $symbol = $id;
            }
            $filters = $this->safe_value($market, 'filters', array());
            $filtersByType = $this->index_by($filters, 'filterType');
            $status = $this->safe_string($market, 'status');
            $active = ($status === 'TRADING');
            $type = $this->safe_string_lower($market, 'marketType');
            if ($type === 'leverage') {
                $type = 'margin';
            }
            $spot = ($type === 'spot');
            $margin = ($type === 'margin');
            $exchangeFee = $this->safe_string_2($market, 'exchangeFee', 'tradingFee');
            $maker = Precise::string_div($this->safe_string($market, 'makerFee', $exchangeFee), '100');
            $taker = Precise::string_div($this->safe_string($market, 'takerFee', $exchangeFee), '100');
            $limitPriceMin = null;
            $limitPriceMax = null;
            $precisionPrice = $this->safe_number($market, 'tickSize');
            if (is_array($filtersByType) && array_key_exists('PRICE_FILTER', $filtersByType)) {
                $filter = $this->safe_value($filtersByType, 'PRICE_FILTER', array());
                $precisionPrice = $this->safe_number($filter, 'tickSize');
                // PRICE_FILTER reports zero values for $maxPrice
                // since they updated $filter types in November 2018
                // https://github.com/ccxt/ccxt/issues/4286
                // therefore limits['price']['max'] doesn't have any meaningful value except null
                $limitPriceMin = $this->safe_number($filter, 'minPrice');
                $maxPrice = $this->safe_number($filter, 'maxPrice');
                if (($maxPrice !== null) && ($maxPrice > 0)) {
                    $limitPriceMax = $maxPrice;
                }
            }
            $precisionAmount = $this->parse_number($this->parse_precision($this->safe_string($market, 'baseAssetPrecision')));
            $limitAmount = array(
                'min' => null,
                'max' => null,
            );
            if (is_array($filtersByType) && array_key_exists('LOT_SIZE', $filtersByType)) {
                $filter = $this->safe_value($filtersByType, 'LOT_SIZE', array());
                $precisionAmount = $this->safe_number($filter, 'stepSize');
                $limitAmount = array(
                    'min' => $this->safe_number($filter, 'minQty'),
                    'max' => $this->safe_number($filter, 'maxQty'),
                );
            }
            $limitMarket = array(
                'min' => null,
                'max' => null,
            );
            if (is_array($filtersByType) && array_key_exists('MARKET_LOT_SIZE', $filtersByType)) {
                $filter = $this->safe_value($filtersByType, 'MARKET_LOT_SIZE', array());
                $limitMarket = array(
                    'min' => $this->safe_number($filter, 'minQty'),
                    'max' => $this->safe_number($filter, 'maxQty'),
                );
            }
            $costMin = null;
            if (is_array($filtersByType) && array_key_exists('MIN_NOTIONAL', $filtersByType)) {
                $filter = $this->safe_value($filtersByType, 'MIN_NOTIONAL', array());
                $costMin = $this->safe_number($filter, 'minNotional');
            }
            $result[] = array(
                'id' => $id,
                'symbol' => $symbol,
                'base' => $base,
                'quote' => $quote,
                'settle' => null,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'settleId' => null,
                'type' => $type,
                'spot' => $spot,
                'margin' => $margin,
                'swap' => false,
                'future' => false,
                'option' => false,
                'active' => $active,
                'contract' => false,
                'linear' => null,
                'inverse' => null,
                'taker' => $this->parse_number($taker),
                'maker' => $this->parse_number($maker),
                'contractSize' => null,
                'expiry' => null,
                'expiryDatetime' => null,
                'strike' => null,
                'optionType' => null,
                'precision' => array(
                    'amount' => $precisionAmount,
                    'price' => $precisionPrice,
                ),
                'limits' => array(
                    'leverage' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'amount' => $limitAmount,
                    'market' => $limitMarket,
                    'price' => array(
                        'min' => $limitPriceMin,
                        'max' => $limitPriceMax,
                    ),
                    'cost' => array(
                        'min' => $costMin,
                        'max' => null,
                    ),
                ),
                'info' => $market,
            );
        }
        return $result;
    }

    public function fetch_accounts($params = array ()) {
        $response = yield $this->privateGetV2Account ($params);
        //
        //     {
        //         "makerCommission" => "0.20",
        //         "takerCommission" => "0.20",
        //         "buyerCommission" => "0.20",
        //         "sellerCommission" => "0.20",
        //         "canTrade" => true,
        //         "canWithdraw" => true,
        //         "canDeposit" => true,
        //         "updateTime" => "1645266330",
        //         "userId" => "644722",
        //         "balances" => array(
        //             array(
        //                 "accountId" => "120702016179403605",
        //                 "collateralCurrency" => false,
        //                 "asset" => "CAKE",
        //                 "free" => "1.784",
        //                 "locked" => "0.0",
        //                 "default" => false,
        //             ),
        //             {
        //                 "accountId" => "109698017713125316",
        //                 "collateralCurrency" => true,
        //                 "asset" => "USD",
        //                 "free" => "7.58632",
        //                 "locked" => "0.0",
        //                 "default" => true,
        //             }
        //         )
        //     }
        //
        $accounts = $this->safe_value($response, 'balances', array());
        $result = array();
        for ($i = 0; $i < count($accounts); $i++) {
            $account = $accounts[$i];
            $accountId = $this->safe_integer($account, 'accountId');
            $currencyId = $this->safe_string($account, 'asset');
            $currencyCode = $this->safe_currency_code($currencyId);
            $result[] = array(
                'id' => $accountId,
                'type' => null,
                'currency' => $currencyCode,
                'info' => $response,
            );
        }
        return $result;
    }

    public function fetch_trading_fees($params = array ()) {
        yield $this->load_markets();
        $response = yield $this->privateGetV2Account ($params);
        return array(
            'info' => $response,
            'maker' => $this->safe_number($response, 'makerCommission'),
            'taker' => $this->safe_number($response, 'takerCommission'),
        );
    }

    public function parse_balance($response, $type = null) {
        //
        //     {
        //         "makerCommission":0.20,
        //         "takerCommission":0.20,
        //         "buyerCommission":0.20,
        //         "sellerCommission":0.20,
        //         "canTrade":true,
        //         "canWithdraw":true,
        //         "canDeposit":true,
        //         "updateTime":1591056268,
        //         "balances":array(
        //             array(
        //                 "accountId":5470306579272368,
        //                 "collateralCurrency":true,
        //                 "asset":"ETH",
        //                 "free":0.0,
        //                 "locked":0.0,
        //                 "default":false,
        //             ),
        //         )
        //     }
        //
        $result = array( 'info' => $response );
        $balances = $this->safe_value($response, 'balances', array());
        for ($i = 0; $i < count($balances); $i++) {
            $balance = $balances[$i];
            $currencyId = $this->safe_string($balance, 'asset');
            $code = $this->safe_currency_code($currencyId);
            $account = $this->account();
            $account['free'] = $this->safe_string($balance, 'free');
            $account['used'] = $this->safe_string($balance, 'locked');
            $result[$code] = $account;
        }
        return $this->safe_balance($result);
    }

    public function fetch_balance($params = array ()) {
        yield $this->load_markets();
        $response = yield $this->privateGetV2Account ($params);
        //
        //     {
        //         "makerCommission" => "0.20",
        //         "takerCommission" => "0.20",
        //         "buyerCommission" => "0.20",
        //         "sellerCommission" => "0.20",
        //         "canTrade" => true,
        //         "canWithdraw" => true,
        //         "canDeposit" => true,
        //         "updateTime" => "1645266330",
        //         "userId" => "644722",
        //         "balances" => array(
        //             array(
        //                 "accountId" => "120702016179403605",
        //                 "collateralCurrency" => false,
        //                 "asset" => "CAKE",
        //                 "free" => "1.784",
        //                 "locked" => "0.0",
        //                 "default" => false,
        //             ),
        //             {
        //                 "accountId" => "109698017413175316",
        //                 "collateralCurrency" => true,
        //                 "asset" => "USD",
        //                 "free" => "7.58632",
        //                 "locked" => "0.0",
        //                 "default" => true,
        //             }
        //         )
        //     }
        //
        return $this->parse_balance($response);
    }

    public function fetch_order_book($symbol, $limit = null, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        if ($limit !== null) {
            $request['limit'] = $limit; // default 100, max 1000, valid limits 5, 10, 20, 50, 100, 500, 1000, 5000
        }
        $response = yield $this->publicGetV2Depth (array_merge($request, $params));
        //
        //     {
        //         "lastUpdateId":1590999849037,
        //         "asks":[
        //             [0.02495,60.0345],
        //             [0.02496,34.1],
        //             ...
        //         ],
        //         "bids":[
        //             [0.02487,72.4144854],
        //             [0.02486,24.043],
        //             ...
        //         ]
        //     }
        //
        $orderbook = $this->parse_order_book($response, $symbol);
        $orderbook['nonce'] = $this->safe_integer($response, 'lastUpdateId');
        return $orderbook;
    }

    public function parse_ticker($ticker, $market = null) {
        //
        // fetchTicker
        //
        //     {
        //         "symbol":"ETH/BTC",
        //         "priceChange":"0.00030",
        //         "priceChangePercent":"1.21",
        //         "weightedAvgPrice":"0.02481",
        //         "prevClosePrice":"0.02447",
        //         "lastPrice":"0.02477",
        //         "lastQty":"60.0",
        //         "bidPrice":"0.02477",
        //         "askPrice":"0.02484",
        //         "openPrice":"0.02447",
        //         "highPrice":"0.02524",
        //         "lowPrice":"0.02438",
        //         "volume":"11.97",
        //         "quoteVolume":"0.298053",
        //         "openTime":1590969600000,
        //         "closeTime":1591000072693
        //     }
        //
        // fetchTickers
        //
        //     {
        //          "symbol" => "SHIB/USD_LEVERAGE",
        //          "weightedAvgPrice" => "0.000027595",
        //          "lastPrice" => "0.00002737",
        //          "lastQty" => "1.11111111E8",
        //          "bidPrice" => "0.00002737",
        //          "askPrice" => "0.00002782",
        //          "highPrice" => "0.00002896",
        //          "lowPrice" => "0.00002738",
        //          "volume" => "16472160000",
        //          "quoteVolume" => "454796.3376",
        //          "openTime" => "1645187472000",
        //          "closeTime" => "1645273872000",
        //     }
        //
        // ws:marketData.subscribe
        //
        //     {
        //          "symbolName":"TXN",
        //          "bid":139.85,
        //          "bidQty":2500,
        //          "ofr":139.92000000000002,
        //          "ofrQty":2500,
        //          "timestamp":1597850971558
        //      }
        //
        $timestamp = $this->safe_integer_2($ticker, 'closeTime', 'timestamp');
        $marketId = $this->safe_string_2($ticker, 'symbol', 'symbolName');
        $market = $this->safe_market($marketId, $market, '/');
        $last = $this->safe_string($ticker, 'lastPrice');
        return $this->safe_ticker(array(
            'symbol' => $market['symbol'],
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => $this->safe_string($ticker, 'highPrice'),
            'low' => $this->safe_string($ticker, 'lowPrice'),
            'bid' => $this->safe_string_2($ticker, 'bidPrice', 'bid'),
            'bidVolume' => $this->safe_string($ticker, 'bidQty'),
            'ask' => $this->safe_string_2($ticker, 'askPrice', 'ofr'),
            'askVolume' => $this->safe_string($ticker, 'ofrQty'),
            'vwap' => $this->safe_string($ticker, 'weightedAvgPrice'),
            'open' => $this->safe_string($ticker, 'openPrice'),
            'close' => $last,
            'last' => $last,
            'previousClose' => $this->safe_string($ticker, 'prevClosePrice'), // previous day close
            'change' => $this->safe_string($ticker, 'priceChange'),
            'percentage' => $this->safe_string($ticker, 'priceChangePercent'),
            'average' => null,
            'baseVolume' => $this->safe_string($ticker, 'volume'),
            'quoteVolume' => $this->safe_string($ticker, 'quoteVolume'),
            'info' => $ticker,
        ), $market, false);
    }

    public function fetch_ticker($symbol, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $response = yield $this->publicGetV2Ticker24hr (array_merge($request, $params));
        //
        //     {
        //         "symbol":"ETH/BTC",
        //         "priceChange":"0.00030",
        //         "priceChangePercent":"1.21",
        //         "weightedAvgPrice":"0.02481",
        //         "prevClosePrice":"0.02447",
        //         "lastPrice":"0.02477",
        //         "lastQty":"60.0",
        //         "bidPrice":"0.02477",
        //         "askPrice":"0.02484",
        //         "openPrice":"0.02447",
        //         "highPrice":"0.02524",
        //         "lowPrice":"0.02438",
        //         "volume":"11.97",
        //         "quoteVolume":"0.298053",
        //         "openTime":1590969600000,
        //         "closeTime":1591000072693
        //     }
        //
        return $this->parse_ticker($response, $market);
    }

    public function fetch_tickers($symbols = null, $params = array ()) {
        yield $this->load_markets();
        $response = yield $this->publicGetV2Ticker24hr ($params);
        //
        //     array(
        //         {
        //              "symbol" => "SHIB/USD_LEVERAGE",
        //              "weightedAvgPrice" => "0.000027595",
        //              "lastPrice" => "0.00002737",
        //              "lastQty" => "1.11111111E8",
        //              "bidPrice" => "0.00002737",
        //              "askPrice" => "0.00002782",
        //              "highPrice" => "0.00002896",
        //              "lowPrice" => "0.00002738",
        //              "volume" => "16472160000",
        //              "quoteVolume" => "454796.3376",
        //              "openTime" => "1645187472000",
        //              "closeTime" => "1645273872000",
        //         }
        //     )
        //
        return $this->parse_tickers($response, $symbols);
    }

    public function parse_ohlcv($ohlcv, $market = null) {
        //
        //     array(
        //         1590971040000,
        //         "0.02454",
        //         "0.02456",
        //         "0.02452",
        //         "0.02456",
        //         249
        //     )
        //
        return array(
            $this->safe_integer($ohlcv, 0),
            $this->safe_number($ohlcv, 1),
            $this->safe_number($ohlcv, 2),
            $this->safe_number($ohlcv, 3),
            $this->safe_number($ohlcv, 4),
            $this->safe_number($ohlcv, 5),
        );
    }

    public function fetch_ohlcv($symbol, $timeframe = '1m', $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
            'interval' => $this->timeframes[$timeframe],
        );
        if ($since !== null) {
            $request['startTime'] = $since;
        }
        if ($limit !== null) {
            $request['limit'] = $limit; // default 500, max 1000
        }
        $response = yield $this->publicGetV2Klines (array_merge($request, $params));
        //
        //     [
        //         [1590971040000,"0.02454","0.02456","0.02452","0.02456",249],
        //         [1590971100000,"0.02455","0.02457","0.02452","0.02456",300],
        //         [1590971160000,"0.02455","0.02456","0.02453","0.02454",286],
        //     ]
        //
        return $this->parse_ohlcvs($response, $market, $timeframe, $since, $limit);
    }

    public function parse_trade($trade, $market = null) {
        //
        // fetchTrades (public aggregate trades)
        //
        //     {
        //         "a":"1658318071",    // Aggregate tradeId
        //         "p":"0.02476",       // Price
        //         "q":"0.0",           // Official doc says => "Quantity (should be ignored)"
        //         "T":"1591001423382", // Epoch $timestamp in MS
        //         "m":false            // Was the buyer the maker
        //     }
        //
        // createOrder fills (private)
        //
        //     {
        //         "price" => "9807.05",
        //         "qty" => "0.01",
        //         "commission" => "0",
        //         "commissionAsset" => "dUSD"
        //     }
        //
        // fetchMyTrades
        //
        //     {
        //         "symbol" => "DOGE/USD",
        //         "id" => "116046000",
        //         "orderId" => "00000000-0000-0000-0000-000006dbb8ad",
        //         "price" => "0.14094",
        //         "qty" => "40.0",
        //         "commission" => "0.01",
        //         "commissionAsset" => "USD",
        //         "time" => "1645283022351",
        //         "buyer" => false,
        //         "maker" => false,
        //         "isBuyer" => false,
        //         "isMaker" => false
        //     }
        //
        $timestamp = $this->safe_integer_2($trade, 'T', 'time');
        $priceString = $this->safe_string_2($trade, 'p', 'price');
        $amountString = $this->safe_string_2($trade, 'q', 'qty');
        $id = $this->safe_string_2($trade, 'a', 'id');
        $side = null;
        $orderId = $this->safe_string($trade, 'orderId');
        if (is_array($trade) && array_key_exists('m', $trade)) {
            $side = $trade['m'] ? 'sell' : 'buy'; // this is reversed intentionally
        } else if (is_array($trade) && array_key_exists('isBuyerMaker', $trade)) {
            $side = $trade['isBuyerMaker'] ? 'sell' : 'buy';
        } else {
            if (is_array($trade) && array_key_exists('isBuyer', $trade)) {
                $side = ($trade['isBuyer']) ? 'buy' : 'sell'; // this is a true $side
            }
        }
        $fee = null;
        if (is_array($trade) && array_key_exists('commission', $trade)) {
            $fee = array(
                'cost' => $this->safe_string($trade, 'commission'),
                'currency' => $this->safe_currency_code($this->safe_string($trade, 'commissionAsset')),
            );
        }
        $takerOrMaker = null;
        if (is_array($trade) && array_key_exists('isMaker', $trade)) {
            $takerOrMaker = $trade['isMaker'] ? 'maker' : 'taker';
        }
        $marketId = $this->safe_string($trade, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market);
        return $this->safe_trade(array(
            'info' => $trade,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $symbol,
            'id' => $id,
            'order' => $orderId,
            'type' => null,
            'takerOrMaker' => $takerOrMaker,
            'side' => $side,
            'price' => $priceString,
            'amount' => $amountString,
            'cost' => null,
            'fee' => $fee,
        ), $market);
    }

    public function fetch_trades($symbol, $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
            // 'limit' => 500, // default 500, max 1000
        );
        if ($limit !== null) {
            $request['limit'] = $limit; // default 500, max 1000
        }
        if ($since !== null) {
            $request['startTime'] = $since;
        }
        $response = yield $this->publicGetV2AggTrades (array_merge($request, $params));
        //
        // array(
        //     array(
        //         "a":"1658318071",    // Aggregate tradeId
        //         "p":"0.02476",       // Price
        //         "q":"0.0",           // Official doc says => "Quantity (should be ignored)"
        //         "T":"1591001423382", // Epoch timestamp in MS
        //         "m":false            // Was the buyer the maker
        //     ),
        // )
        //
        return $this->parse_trades($response, $market, $since, $limit);
    }

    public function parse_order_status($status) {
        $statuses = array(
            'NEW' => 'open',
            'PARTIALLY_FILLED' => 'open',
            'FILLED' => 'closed',
            'CANCELED' => 'canceled',
            'PENDING_CANCEL' => 'canceling', // currently unused
            'REJECTED' => 'rejected',
            'EXPIRED' => 'expired',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_order($order, $market = null) {
        //
        //     {
        //         "symbol" => "BTC/USD",
        //         "orderId" => "00000000-0000-0000-0000-0000000c0263",
        //         "clientOrderId" => "00000000-0000-0000-0000-0000000c0263",
        //         "transactTime" => 1589878206426,
        //         "price" => "9825.66210000",
        //         "origQty" => "0.01",
        //         "executedQty" => "0.01",
        //         "status" => "FILLED",
        //         "timeInForce" => "FOK",
        //         "type" => "MARKET",
        //         "side" => "BUY",
        //         "fills" => array(
        //             {
        //                 "price" => "9807.05",
        //                 "qty" => "0.01",
        //                 "commission" => "0",
        //                 "commissionAsset" => "dUSD"
        //             }
        //         )
        //     }
        //
        $status = $this->parse_order_status($this->safe_string($order, 'status'));
        $marketId = $this->safe_string($order, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market, '/');
        $timestamp = null;
        if (is_array($order) && array_key_exists('time', $order)) {
            $timestamp = $this->safe_integer($order, 'time');
        } else if (is_array($order) && array_key_exists('transactTime', $order)) {
            $timestamp = $this->safe_integer($order, 'transactTime');
        }
        $price = $this->safe_string($order, 'price');
        $amount = $this->safe_string($order, 'origQty');
        $filled = Precise::string_abs($this->safe_string($order, 'executedQty'));
        $cost = $this->safe_string($order, 'cummulativeQuoteQty');
        $id = $this->safe_string($order, 'orderId');
        $type = $this->safe_string_lower($order, 'type');
        $side = $this->safe_string_lower($order, 'side');
        $fills = $this->safe_value($order, 'fills');
        $timeInForce = $this->safe_string($order, 'timeInForce');
        return $this->safe_order(array(
            'info' => $order,
            'id' => $id,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => null,
            'symbol' => $symbol,
            'type' => $type,
            'timeInForce' => $timeInForce,
            'side' => $side,
            'price' => $price,
            'stopPrice' => null,
            'amount' => $amount,
            'cost' => $cost,
            'average' => null,
            'filled' => $filled,
            'remaining' => null,
            'status' => $status,
            'fee' => null,
            'trades' => $fills,
        ), $market);
    }

    public function create_order($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        $accountId = null;
        if ($market['margin']) {
            $accountId = $this->safe_integer($params, 'accountId');
            if ($accountId === null) {
                throw new ArgumentsRequired($this->id . ' createOrder() requires an $accountId parameter for ' . $market['type'] . ' $market ' . $symbol);
            }
        }
        $uppercaseType = strtoupper($type);
        $newOrderRespType = $this->safe_value($this->options['newOrderRespType'], $type, 'RESULT');
        $request = array(
            'symbol' => $market['id'],
            'quantity' => $this->amount_to_precision($symbol, $amount),
            'type' => $uppercaseType,
            'side' => strtoupper($side),
            'newOrderRespType' => $newOrderRespType, // 'RESULT' for full order or 'FULL' for order with fills
            // 'leverage' => 1,
            // 'accountId' => 5470306579272968, // required for leverage markets
            // 'takeProfit' => '123.45',
            // 'stopLoss' => '54.321'
            // 'guaranteedStopLoss' => '54.321',
        );
        if ($type === 'limit') {
            $request['price'] = $this->price_to_precision($symbol, $price);
            $request['timeInForce'] = $this->options['defaultTimeInForce']; // 'GTC' = Good To Cancel (default), 'IOC' = Immediate Or Cancel, 'FOK' = Fill Or Kill
        } else if ($type === 'stop') {
            $request['price'] = $this->price_to_precision($symbol, $price);
        }
        $response = yield $this->privatePostV2Order (array_merge($request, $params));
        //
        // limit
        //
        //     {
        //         "symbol" => "BTC/USD",
        //         "orderId" => "00000000-0000-0000-0000-000006eaaaa0",
        //         "transactTime" => "1645281669295",
        //         "price" => "30000.00000000",
        //         "origQty" => "0.0002",
        //         "executedQty" => "0.0",  //positive for BUY, negative for SELL
        //         "status" => "NEW",
        //         "timeInForce" => "GTC",
        //         "type" => "LIMIT",
        //         "side" => "BUY",
        //     }
        //
        // $market
        //
        //     {
        //         "symbol" => "DOGE/USD",
        //         "orderId" => "00000000-0000-0000-0000-000006eab8ad",
        //         "transactTime" => "1645283022252",
        //         "price" => "0.14066000",
        //         "origQty" => "40",
        //         "executedQty" => "40.0",  //positive for BUY, negative for SELL
        //         "status" => "FILLED",
        //         "timeInForce" => "FOK",
        //         "type" => "MARKET",
        //         "side" => "SELL",
        //         "fills" => array(
        //             array(
        //                 "price" => "0.14094",
        //                 "qty" => "40.0",
        //                 "commission" => "0",
        //                 "commissionAsset" => "dUSD",
        //             ),
        //         ),
        //     }
        //
        return $this->parse_order($response, $market);
    }

    public function fetch_open_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        $market = null;
        $request = array();
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['symbol'] = $market['id'];
        } else if ($this->options['warnOnFetchOpenOrdersWithoutSymbol']) {
            $symbols = $this->symbols;
            $numSymbols = is_array($symbols) ? count($symbols) : 0;
            $fetchOpenOrdersRateLimit = intval($numSymbols / 2);
            throw new ExchangeError($this->id . ' fetchOpenOrders() WARNING => fetching open orders without specifying a $symbol is rate-limited to one call per ' . (string) $fetchOpenOrdersRateLimit . ' seconds. Do not call this method frequently to avoid ban. Set ' . $this->id . '.options["warnOnFetchOpenOrdersWithoutSymbol"] = false to suppress this warning message.');
        }
        $response = yield $this->privateGetV2OpenOrders (array_merge($request, $params));
        //
        //     array(
        //         array(
        //             "symbol" => "DOGE/USD",
        //             "orderId" => "00000000-0000-0003-0000-000004bac57a",
        //             "price" => "0.13",
        //             "origQty" => "39.0",
        //             "executedQty" => "0.0",
        //             "status" => "NEW",
        //             "timeInForce" => "GTC",
        //             "type" => "LIMIT",
        //             "side" => "BUY",
        //             "time" => "1645284216240",
        //             "updateTime" => "1645284216240",
        //             "leverage" => false,
        //             "working" => true
        //         ),
        //     )
        //
        return $this->parse_orders($response, $market, $since, $limit);
    }

    public function cancel_order($id, $symbol = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' cancelOrder() requires a $symbol argument');
        }
        yield $this->load_markets();
        $market = $this->market($symbol);
        $origClientOrderId = $this->safe_value($params, 'origClientOrderId');
        $request = array(
            'symbol' => $market['id'],
            // 'orderId' => intval($id),
            // 'origClientOrderId' => $id,
        );
        if ($origClientOrderId === null) {
            $request['orderId'] = $id;
        } else {
            $request['origClientOrderId'] = $origClientOrderId;
        }
        $response = yield $this->privateDeleteV2Order (array_merge($request, $params));
        //
        //     {
        //         "symbol":"ETH/USD",
        //         "orderId":"00000000-0000-0000-0000-00000024383b",
        //         "clientOrderId":"00000000-0000-0000-0000-00000024383b", // this might not be present
        //         "price":"150",
        //         "origQty":"0.1",
        //         "executedQty":"0.0",
        //         "status":"CANCELED",
        //         "timeInForce":"GTC",
        //         "type":"LIMIT",
        //         "side":"BUY"
        //     }
        //
        return $this->parse_order($response, $market);
    }

    public function fetch_my_trades($symbol = null, $since = null, $limit = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchMyTrades() requires a $symbol argument');
        }
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = yield $this->privateGetV2MyTrades (array_merge($request, $params));
        //
        //     array(
        //         array(
        //             "symbol" => "DOGE/USD",
        //             "id" => "116046000",
        //             "orderId" => "00000000-0000-0000-0000-000006dbb8ad",
        //             "price" => "0.14094",
        //             "qty" => "40.0",
        //             "commission" => "0.01",
        //             "commissionAsset" => "USD",
        //             "time" => "1645283022351",
        //             "buyer" => false,
        //             "maker" => false,
        //             "isBuyer" => false,
        //             "isMaker" => false
        //         ),
        //     )
        //
        return $this->parse_trades($response, $market, $since, $limit);
    }

    public function fetch_deposits($code = null, $since = null, $limit = null, $params = array ()) {
        return $this->fetch_transactions_by_method('privateGetV2Deposits', $code, $since, $limit, $params);
    }

    public function fetch_withdrawals($code = null, $since = null, $limit = null, $params = array ()) {
        return $this->fetch_transactions_by_method('privateGetV2Withdrawals', $code, $since, $limit, $params);
    }

    public function fetch_transactions($code = null, $since = null, $limit = null, $params = array ()) {
        return $this->fetch_transactions_by_method('privateGetV2Transactions', $code, $since, $limit, $params);
    }

    public function fetch_transactions_by_method($method, $code = null, $since = null, $limit = null, $params = array ()) {
        yield $this->load_markets();
        $request = array();
        $currency = null;
        if ($code !== null) {
            $currency = $this->currency($code);
        }
        if ($since !== null) {
            $request['startTime'] = $since;
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = yield $this->$method (array_merge($request, $params));
        //
        //     array(
        //       array(
        //         "id" => "616769213",
        //         "balance" => "2.088",
        //         "amount" => "1.304",   // negative for 'withdrawal'
        //         "currency" => "CAKE",
        //         "type" => "deposit",
        //         "timestamp" => "1645282121023",
        //         "paymentMethod" => "BLOCKCHAIN",
        //         "blockchainTransactionHash" => "0x57c68c1f2ae74d5eda5a2a00516361d241a5c9e1ee95bf32573523857c38c112",
        //         "status" => "PROCESSED",
        //         "commission" => "0.14", // this property only exists in withdrawal
        //       ),
        //     )
        //
        return $this->parse_transactions($response, $currency, $since, $limit, $params);
    }

    public function parse_transaction($transaction, $currency = null) {
        $id = $this->safe_string($transaction, 'id');
        $txHash = $this->safe_string($transaction, 'blockchainTransactionHash');
        $amount = $this->safe_number($transaction, 'amount');
        $timestamp = $this->safe_integer($transaction, 'timestamp');
        $currencyId = $this->safe_string($transaction, 'currency');
        $code = $this->safe_currency_code($currencyId, $currency);
        $state = $this->parse_transaction_status($this->safe_string($transaction, 'state'));
        $type = $this->parse_transaction_type($this->safe_string($transaction, 'type'));
        $feeCost = $this->safe_string($transaction, 'commission');
        $fee = null;
        if ($feeCost !== null) {
            $fee = array( 'currency' => $code, 'cost' => $feeCost );
        }
        $result = array(
            'id' => $id,
            'txid' => $txHash,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'network' => null,
            'addressFrom' => null,
            'address' => null,
            'addressTo' => null,
            'tagFrom' => null,
            'tag' => null,
            'tagTo' => null,
            'type' => $type,
            'amount' => $amount,
            'currency' => $code,
            'status' => $state,
            'updated' => null,
            'comment' => null,
            'fee' => $fee,
            'info' => $transaction,
        );
        return $result;
    }

    public function parse_transaction_status($status) {
        $statuses = array(
            'APPROVAL' => 'pending',
            'PROCESSED' => 'ok',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_transaction_type($type) {
        $types = array(
            'deposit' => 'deposit',
            'withdrawal' => 'withdrawal',
        );
        return $this->safe_string($types, $type, $type);
    }

    public function fetch_leverage($symbol, $params = array ()) {
        yield $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $response = yield $this->privateGetV2LeverageSettings (array_merge($request, $params));
        //
        // {
        //     "values" => array( 1, 2, 5, 10, ),
        //     "value" => "10",
        // }
        //
        return $this->safe_number($response, 'value');
    }

    public function fetch_deposit_address($code, $params = array ()) {
        yield $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'coin' => $currency['id'],
        );
        $response = yield $this->privateGetV2DepositAddress (array_merge($request, $params));
        //
        //     array( "address":"0x97d64eb014ac779194991e7264f01c74c90327f0" )
        //
        return $this->parse_deposit_address($response, $currency);
    }

    public function parse_deposit_address($depositAddress, $currency = null) {
        $address = $this->safe_string($depositAddress, 'address');
        $this->check_address($address);
        $currency = $this->safe_currency(null, $currency);
        return array(
            'currency' => $currency['code'],
            'address' => $address,
            'tag' => null,
            'network' => null,
            'info' => $depositAddress,
        );
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $url = $this->urls['api'][$api] . '/' . $path;
        if ($path === 'historicalTrades') {
            $headers = array(
                'X-MBX-APIKEY' => $this->apiKey,
            );
        }
        if ($api === 'private') {
            $this->check_required_credentials();
            $query = $this->urlencode(array_merge(array(
                'timestamp' => $this->nonce(),
                'recvWindow' => $this->options['recvWindow'],
            ), $params));
            $signature = $this->hmac($this->encode($query), $this->encode($this->secret));
            $query .= '&' . 'signature=' . $signature;
            $headers = array(
                'X-MBX-APIKEY' => $this->apiKey,
            );
            if (($method === 'GET') || ($method === 'DELETE')) {
                $url .= '?' . $query;
            } else {
                $body = $query;
                $headers['Content-Type'] = 'application/x-www-form-urlencoded';
            }
        } else {
            if ($params) {
                $url .= '?' . $this->urlencode($params);
            }
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors($httpCode, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if (($httpCode === 418) || ($httpCode === 429)) {
            throw new DDoSProtection($this->id . ' ' . (string) $httpCode . ' ' . $reason . ' ' . $body);
        }
        // error $response in a form => array( "code" => -1013, "msg" => "Invalid quantity." )
        // following block cointains legacy checks against $message patterns in "msg" property
        // will switch "code" checks eventually, when we know all of them
        if ($httpCode >= 400) {
            if (mb_strpos($body, 'Price * QTY is zero or less') !== false) {
                throw new InvalidOrder($this->id . ' order cost = amount * price is zero or less ' . $body);
            }
            if (mb_strpos($body, 'LOT_SIZE') !== false) {
                throw new InvalidOrder($this->id . ' order amount should be evenly divisible by lot size ' . $body);
            }
            if (mb_strpos($body, 'PRICE_FILTER') !== false) {
                throw new InvalidOrder($this->id . ' order price is invalid, i.e. exceeds allowed price precision, exceeds min price or max price limits or is invalid float value in general, use $this->price_to_precision(symbol, amount) ' . $body);
            }
        }
        if ($response === null) {
            return; // fallback to default error handler
        }
        //
        //     array("code":-1128,"msg":"Combination of optional parameters invalid.")
        //
        $errorCode = $this->safe_string($response, 'code');
        if (($errorCode !== null) && ($errorCode !== '0')) {
            $feedback = $this->id . ' ' . $this->json($response);
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $errorCode, $feedback);
            $message = $this->safe_string($response, 'msg');
            $this->throw_broadly_matched_exception($this->exceptions['broad'], $message, $feedback);
            throw new ExchangeError($feedback);
        }
    }
}
